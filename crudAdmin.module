<?php

use Assert\Assertion;
use Liip\Drupal\Modules\DrupalConnector\ConnectorFactory;
use Liip\Drupal\Modules\DrupalConnector\Common;
use Liip\Drupal\Modules\Registry\Memory\Popo;

/**
 * This module file is required by Drupal to act as entry point to the current module.
 *
 * @author     Bastian Feder <drupal@bastian-feder.de>
 * @license    http://www.opensource.org/licenses/mit-license.php The MIT License
 * @copyright  Copyright (c) 2013 Liip Inc.
 */


/**
 * Registers a callback function to be invoked.
 *
 * e.g.
 *   CrudAdmin_registerCallback('submit', 'myModule_formSubmitHook_Callback');
 *
 *   will call »myModule_formSubmitHook_Callback« in case the form was submitted.
 *
 * @param string $type
 * @param string $callback
 * @param Assert\Assertion $assertions
 */
function CrudAdmin_registerCallback($type, $callback)
{
    /** @var \Liip\Drupal\Modules\DrupalConnector\Common $dcc */
    $dcc = ConnectorFactory::getCommonConnector();

    /** @var \Assert\Assertion $assertions  */
    $assertions = new Assertion();

    $registry = _CrudAdmin_getCallBacksRegistry($dcc, $assertions);
    $registry->register($type, $callback);
}

/**
 * Provides the set of callbacks registered in a registry.
 *
 * @param \Liip\Drupal\Modules\DrupalConnector\Common $dcc
 * @param \Assert\Assertion $assertions
 *
 * @return \Liip\Drupal\Modules\Registry\Memory\Popo
 */
function _CrudAdmin_getCallBacksRegistry(Common $dcc, Assertion $assertions)
{
    static $registry;

    if (!$registry) {

        $registry = new Popo('registry_CrudModule_callbacks', $dcc, $assertions);
    }

    return $registry;
}
